import "parser".

define variable (substitutions for C identifiers)
	with initial value (false).
define procedure (substitute (str) for (c)) to do {
	set (substitutions for C identifiers) to 
		(((c), (str)), (substitutions for C identifiers)).
}.
substitute "_SPACE" for (space).
substitute "_UNDERSCORE" for (underscore).
substitute "_STAR" for (star).
substitute "_PLUS" for (plus).
substitute "_DASH" for (minus).
substitute "_SLASH" for (slash).
substitute "_COMMA" for (comma).
substitute "_LESSER" for (left angle).
substitute "_GREATER" for (right angle).

define procedure (C ident for action (action)) to do {
	define variable (name) with initial value (name of action (action)).
	define variable (args) with initial value (arguments of action (action)).
	define variable (ident) with initial value "calein_".
	define variable (i) with initial value #0.
	define variable (c) with initial value (false).
	define variable (added) with initial value (false).
	define variable (substitutions) with initial value (false).
	while (not ((i) is equal to (length (name)))) do {
		set (c) to (character at (i) of (name)).
		set (added) to (false).
		set (substitutions) to (substitutions for C identifiers).
		while (substitutions) do {
			if ((c) is equal to (first (first (substitutions))))
			then {
				append string (second (first (substitutions))) to (ident).
				set (added) to (true).
				set (substitutions) to (false).
			} else (set (substitutions) to (second (substitutions))).
		}.
		if (not (added)) then (append character (c) to (ident)) else (false).
		if (args) then (if ((i) is equal to (first (first (args)))) then {
			append string "_ARG" to (ident).
			set (args) to (second (args)).
		} else (false)) else (false).
		set (i) to ((i) + #1).
	}.
	if (args) then (append string "_ARG" to (ident)) else (false).
	ident.
}.

define procedure (C string for literal (literal)) to do {
	define variable (string) with initial value "\"".
	define variable (i) with initial value #0.
	define variable (c) with initial value (false).
	while (not ((i) is equal to (length (literal)))) do {
		set (c) to (character at (i) of (literal)).
		if ((c) is equal to (quote))
			then (append string "\\\"" to (string))
		else (if ((c) is equal to (backslash))
			then (append string "\\\\" to (string))
		else (if ((c) is equal to (new line))
			then (append string "\\n" to (string))
		else (append character (c) to (string)))).
		set (i) to ((i) + #1).
	}.
	append character (quote) to (string).
	string.
}.
