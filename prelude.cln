define variable (true) with initial value (#0 is equal to #0).
define variable (false) with initial value (not (true)).
define variable (tab) with initial value #9.
define variable (tab string) with initial value "".
append character (tab) to (tab string).
define variable (new line) with initial value #10.
define variable (space) with initial value #32.
define variable (quote) with initial value #34.
define variable (number sigil) with initial value #35.
define variable (open paren) with initial value #40.
define variable (close paren) with initial value #41.
define variable (star) with initial value #42.
define variable (plus) with initial value #43.
define variable (comma) with initial value #44.
define variable (minus) with initial value #45.
define variable (dot) with initial value #46.
define variable (slash) with initial value #47.
define variable (character 0) with initial value #48.
define variable (backslash) with initial value #92.
define variable (underscore) with initial value #95.
define variable (character n) with initial value #110.
define variable (open brace) with initial value #123.
define variable (close brace) with initial value #125.

define procedure ((a) or (b))
	to do (if (a) then (a) else (b)).
define procedure ((a) and (b))
	to do (if (a) then (b) else (a)).

define procedure ((list) at (index)) to do {
	while (not ((index) is equal to #0)) do {
		set (list) to (second (list)).
		set (index) to ((index) - #1).
	}.
	first (list).
}.

define procedure ((a) or (b) or (c))
	to do (((a) or (b)) or (c)).
define procedure ((a) or (b) or (c) or (d))
	to do (((a) or (b)) or ((c) or (d))).

define procedure ((x) is between (a) and (b)) to do {
	define variable (found) with initial value (false).
	while (not ((a) is equal to (b))) do {
		if ((a) is equal to (x))
			then (set (found) to (true))
			else (false).
		set (a) to ((a) + #1).
	}.
	found.
}.

define procedure (reverse string (s)) to do {
	define variable (rev) with initial value "".
	define variable (i) with initial value #0.
	while (not ((i) is equal to (length (s)))) do {
		append character (character at (((length (s)) - (i)) - #1) of (s))
			to (rev).
		set (i) to ((i) + #1).
	}.
	rev.
}.

define procedure (string of number (number)) to do {
	define variable (s) with initial value "".
	while (not ((number) is equal to #0)) do {
		append character (((number) mod #10) + (character 0)) to (s).
		set (number) to ((number) / #10).
	}.
	if ((s) is equal to "")
		then "0"
		else (reverse string (s)).
}.

define procedure ((c) is digit) to do 
	((c) is between #48 and #58).
define procedure ((c) is whitespace) to do
	(((c) is equal to (space)) or
	 ((c) is equal to (tab)) or
	 ((c) is equal to (new line))).

define procedure (reverse list (list)) to do {
	define variable (acc) with initial value (false).
	while (list) do {
		set (acc) to ((first (list)), (acc)).
		set (list) to (second (list)).
	}.
	acc.
}.

define procedure (last character of (s))
	to do (character at ((length (s)) - #1) of (s)).

define procedure ((c) is (c 1), (c 2), (c 3), or (c 4))
	to do (((c) is equal to (c 1)) or ((c) is equal to (c 2)) or
		((c) is equal to (c 3)) or ((c) is equal to (c 4))).

define procedure (append string (t) to (s)) to do {
	define variable (i) with initial value #0.
	while (not ((i) is equal to (length (t)))) do {
		append character (character at (i) of (t)) to (s).
		set (i) to ((i) + #1).
	}.
}.

define procedure (concat (s) and (t)) to do {
	define variable (u) with initial value "".
	append string (s) to (u).
	append string (t) to (u).
	u.
}.

define procedure ((list) contains (elem)) to do {
	define variable (found) with initial value (false).
	while (list) do {
		if ((first (list)) is equal to (elem)) then {
			set (list) to (false).
			set (found) to (true).
		} else (set (list) to (second (list))).
	}.
	found.
}.

define procedure (lookup (key) in (alist)) to do {
	define variable (found) with initial value (false).
	while (alist) do {
		if ((first (first (alist))) is equal to (key)) then {
			set (found) to (second (first (alist))).
			set (alist) to (false).
		} else (set (alist) to (second (alist))).
	}.
	found.
}.
