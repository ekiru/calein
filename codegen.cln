import "c-utils".

define variable (source level debugging)
	with initial value (true).

define procedure (emit position (pos) to (out)) to do {
	if (source level debugging) then {
		append string "\n#line " to (out).
		append string (string of number (line of position (pos))) to (out).
		append string " " to (out).
		append string (C string for literal (file of position (pos))) to (out).
		append character (new line) to (out).
	} else (false).
}.

define record (make ir call (name of ir call) with arguments (arguments of ir call) at (position of ir call))
	with predicate ((ir) is an ir call).
define record (make ir procedure (name of ir procedure) with body (body of ir procedure) at (position of ir procedure))
	with predicate ((ir) is an ir procedure).
define record (make ir sequence (items of ir sequence) at (position of ir sequence))
	with predicate ((ir) is an ir sequence).
define record (make ir if (condition of ir if) then (then of ir if) else (else of ir if) at (position of ir if))
	with predicate ((ir) is an ir if).
define record (make ir while (condition of ir while) with body (body of ir while) at (position of ir while))
	with predicate ((ir) is an ir while).
define record (make ir variable (name of ir variable) with initial value (initial value of ir variable) at (position of ir variable))
	with predicate ((ir) is an ir variable).
define record (make ir assignment (name of ir assignment) with value (value of ir assignment) at (position of ir assignment))
	with predicate ((ir) is an ir assignment).
define record (make ir literal (value of ir literal) at (position of ir literal))
	with predicate ((ir) is an ir literal).
define record (make ir number (value of ir number) at (position of ir number))
	with predicate ((ir) is an ir number).
define record (make ir import (name of ir import) with ir (ir of ir import) at (position of ir import))
	with predicate ((ir) is an ir import).
define record (make ir record (definition of ir record) with predicate (predicate of ir record) at (position of ir record))
	with predicate ((ir) is an ir record).

define variable (expression context) with initial value "expression context".
define variable (statement context) with initial value "statement context".
define variable (definition context) with initial value "definition context".
define variable (declaration context) with initial value "declaration context".
define variable (initializer context) with initial value "initializer context".
define variable (nested definition context) with initial value "nested definition context".
define variable (procedure definition context) with initial value "procedure definition context".

define variable (variable list) with initial value (false).
define variable (function list) with initial value (false).
define variable (function variable list) with initial value (false).
define variable (module list by context) with initial value (false).

define procedure (register variable (var) in scope (scope)) to do {
	define variable (old scope) with initial value (lookup (var) in (variable list)).
	if (not ((old scope) is equal to (scope)))
		then (set (variable list) to (((var), (scope)), (variable list)))
		else (true).
}.

define procedure ((context) is an evaluation)
	to do (not ((((context) is equal to (definition context))
		or ((context) is equal to (initializer context))
		or ((context) is equal to (nested definition context))
		or ((context) is equal to (procedure definition context)))
		or ((context) is equal to (declaration context)))).

define variable (global scope) with initial value "global".

register variable "calein_program_SPACEarguments"
	in scope (global scope).

define procedure (emit reference to variable (name) from scope (var scope) in scope (scope) to (out)) to do {
	if ((var scope) is equal to (global scope))
		then (append string (name) to (out))
	else {
		if ((var scope) is equal to (scope)) then {
			append string "local_vars." to (out).
		} else {
			append string (var scope) to (out).
			append string "_local_vars->" to (out).
		}.
		append string (name) to (out).
	}.
}.

define procedure (emit locals struct tag for (proc name) to (out)) to do {
	append string "struct " to (out).
	append string (proc name) to (out).
	append string "_local_vars" to (out).
}.

define procedure (emit locals struct for procedure (ir) named (proc name) to (out) in (scope)) to do {
	emit locals struct tag for (proc name) to (out).
	append string " {\n" to (out).
	if (not ((scope) is equal to (global scope))) then {
		emit locals struct declaration for (scope) to (out) in (proc name).
		append string ";\n" to (out).
	} else (false).
	define variable (args) with initial value (arguments of action (name of ir procedure (ir))).
	define variable (ident) with initial value (false).
	while (args) do {
		set (ident) to (C ident for action (second (first (args)))).
		if (not ((lookup (ident) in (variable list)) is equal to (proc name))) then {
			register variable (ident) in scope (proc name).
			append string "struct value *" to (out).
			append string (ident) to (out).
			append string ";\n" to (out).
		} else (false).
		set (args) to (second (args)).
	}.
	emit (body of ir procedure (ir)) to (out) in (nested definition context) with scope (proc name).
	append string "};\n" to (out).
}.

define procedure (emit locals struct declaration for (proc name) to (out) in (scope)) to do {
	emit locals struct tag for (proc name) to (out).
	if ((proc name) is equal to (scope)) then {
		append string " local_vars" to (out).
	} else {
		append string " *" to (out).
		append string (proc name) to (out).
		append string "_local_vars" to (out).
	}.
}.

define variable (continue) with initial value (true).

define procedure (compile error (msg)) to do {
	write "compile error: ".
	write line (msg).
	set (continue) to (false).
}.

define procedure (emit (ir) to (out) in (context) with scope (scope)) to do {
	define variable (args) with initial value (false).
	define variable (var scope) with initial value (false).
	define variable (sep) with initial value (false).
	define variable (name) with initial value (false).
	define variable (proc name) with initial value (false).
	if ((ir) is an ir call) then {
		if ((context) is an evaluation) then {
			emit position (position of ir call (ir)) to (out).
			set (args) to (arguments of ir call (ir)).
			set (name) to (name of ir call (ir)).
			set (var scope) to (lookup (name) in (variable list)).
			if ((args) or (not (var scope))) then {
				define variable (function info) with initial value (lookup (name) in (function list)).
				if (function info)
					then (set (name) to (first (function info)))
					else (set (name) to (concat (global scope) and (concat "_SCOPE" and (name)))).
				append string (name) to (out).
				append string "(" to (out).
				set (sep) to "".
				if (function info) then (if (not ((second (function info)) is equal to (global scope))) then {
					append string "&local_vars" to (out).
					set (sep) to ",".
				} else (false)) else (false).
				while (args) do {
					append string (sep) to (out).
					append string "value_add_reference(" to (out).
					emit (first (args)) to (out) in (expression context) with scope (scope).
					append string ")" to (out).
					set (sep) to ",".
					set (args) to (second (args)).
				}.
				append string ")" to (out).
				if ((context) is equal to (statement context))
					then (append string ";\n" to (out))
					else (false).
			} else {
				emit reference to variable (name) from scope (var scope) in scope (scope) to (out).
				if ((context) is equal to (statement context))
					then (append string ";\n" to (out))
					else (false).
			}.
		} else (false).
	} else (if ((ir) is an ir record) then {
		if ((scope) is equal to (global scope)) then {
			if ((context) is equal to (declaration context)) then {
				define variable (record name) with initial value (C ident for action (definition of ir record (ir))).
				append string "struct value *" to (out).
				append string (scope) to (out).
				append string "_SCOPE" to (out).
				append string (record name) to (out).
				append string "(" to (out).
				set (args) to (arguments of action (definition of ir record (ir))).
				set (sep) to "".
				define variable (i) with initial value #0.
				while (args) do {
					append string (sep) to (out).
					append string "struct value *arg" to (out).
					append string (string of number (i)) to (out).
					set (i) to ((i) + #1).
					set (args) to (second (args)).
					set (sep) to ", ".
				}.
				define variable (field count) with initial value (i).
				append string ") {\n" to (out).
				append string "struct value *result = value_make_record(" to (out).
				append string (C string for literal (record name)) to (out).
				append string ", " to (out).
				append string (string of number (field count)) to (out).
				append string ");\n" to (out).
				set (i) to #0.
				while (not ((i) is equal to (field count))) do {
					append string "result->u.record.fields[" to (out).
					append string (string of number (i)) to (out).
					append string "] = arg" to (out).
					append string (string of number (i)) to (out).
					append string ";\n" to (out).
					set (i) to ((i) + #1).
				}.
				append string "return result;\n}\n" to (out).

				set (proc name) to (C ident for action (predicate of ir record (ir))).
				set (proc name) to (concat (scope) and (concat "_SCOPE" and (proc name))).
				append string "struct value *" to (out).
				append string (proc name) to (out).
				append string "(struct value *v) {\n" to (out).
				append string "return value_make_boolean(v->kind == value_kind_record && !strcmp(v->u.record.type, " to (out).
				append string (C string for literal (record name)) to (out).
				append string "));\n}" to (out).

				set (args) to (arguments of action (definition of ir record (ir))).
				set (i) to #0.
				while (args) do {
					set (proc name) to (C ident for action (second (first (args)))).
					set (proc name) to (concat (scope) and (concat "_SCOPE" and (proc name))).
					append string "struct value *" to (out).
					append string (proc name) to (out)..
					append string "_ARG(struct value *record) {\n" to (out).
					append string "return value_record_field(record, " to (out).
					append string (C string for literal (record name)) to (out).
					append string ", " to (out).
					append string (string of number (i)) to (out).
					append string ");\n}" to (out).
					set (args) to (second (args)).
					set (i) to ((i) + #1).
				}.
			} else (false).
		} else (compile error "Can only declare records at the top level.").
	} else (if ((ir) is an ir procedure) then {
		set (proc name) to (C ident for action (name of ir procedure (ir))).
		define variable (adjusted proc name) with initial value (concat (scope) and (concat "_SCOPE" and (proc name))).
		set (function list) to (((proc name), ((adjusted proc name), (scope))), (function list)).
		set (proc name) to (adjusted proc name).
		define variable (old function list) with initial value (function list).
		define variable (old variable list) with initial value (variable list).
		if (((context) is equal to (definition context)) or ((context) is equal to (procedure definition context))
			or ((context) is equal to (declaration context))) then {
			if ((context) is equal to (declaration context)) then {
				emit locals struct for procedure (ir) named (proc name) to (out) in (scope).
				emit (body of ir procedure (ir)) to (out) in (declaration context) with scope (proc name).
			} else {
				set (variable list) to (lookup (adjusted proc name) in (function variable list)).
				emit (body of ir procedure (ir)) to (out) in (procedure definition context) with scope (proc name).
			}.
			append string "struct value *" to (out).
			append string (proc name) to (out).
			append string "(" to (out).
			set (args) to (arguments of action (name of ir procedure (ir))).
			set (sep) to "".
			define variable (ident) with initial value (false).
			if ((args) or (not ((scope) is equal to (global scope)))) then {
				if (not ((scope) is equal to (global scope))) then {
					emit locals struct declaration for (scope) to (out) in (proc name).
					set (sep) to ", ".
				} else (false).
				while (args) do {
					set (ident) to (C ident for action (second (first (args)))).
					append string (sep) to (out).
					append string "struct value *" to (out).
					append string (ident) to (out).
					set (args) to (second (args)).
					set (sep) to ", ".
				}.
			} else (append string "void" to (out)).
			append string ")" to (out).
			if ((context) is equal to (declaration context)) then {
				append string ";\n" to (out).
			} else {
				append string "{\n" to (out).
				emit locals struct declaration for (proc name) to (out) in (proc name).
				append string ";\n" to (out).

				emit (body of ir procedure (ir)) to (out) in (initializer context) with scope (proc name).
				set (args) to (arguments of action (name of ir procedure (ir))).
				if (not ((scope) is equal to (global scope))) then {
					append string "local_vars." to (out).
					append string (scope) to (out).
					append string "_local_vars = " to (out).
					append string (scope) to (out).
					append string "_local_vars;\n" to (out).
				} else (false).
				while (args) do {
					set (ident) to (C ident for action (second (first (args)))).
					append string "local_vars." to (out).
					append string (ident) to (out).
					append string " = " to (out).
					append string (ident) to (out).
					append string ";\n" to (out).
					set (args) to (second (args)).
				}.

				append string "struct value *tmp_for_derefs = 0;\n" to (out).
				append string "struct value *result = " to (out).
				emit (body of ir procedure (ir)) to (out) in (expression context) with scope (proc name).
				append string ";\nvalue_add_reference(result);\n" to (out).
				define variable (vars) with initial value (variable list).
				while (vars) do {
					if ((second (first (vars))) is equal to (proc name)) then {
						append string "value_remove_reference(" to (out).
						emit reference to variable (first (first (vars)))
							from scope (proc name) in scope (proc name) to (out).
						append string ");" to (out).
						set (vars) to (second (vars)).
					} else (set (vars) to (false)).
				}.
				append string "return result;\n}\n" to (out).
			}.
			if ((context) is equal to (declaration context))
			then (set (function variable list)
				to (((adjusted proc name), (variable list)), (function variable list)))
			else (false).
		} else (false).
		set (variable list) to (old variable list).
		set (function list) to (old function list).
	} else (if ((ir) is an ir sequence) then {
		define variable (items)
			with initial value (items of ir sequence (ir)).
		define variable (expected sep) with initial value "".
		define variable (old length) with initial value (false).
		if ((context) is equal to (expression context)) then {
			set (expected sep) to ", ".
			append string "(" to (out).
		} else (false).
		set (sep) to (expected sep).
		set (old length) to (length (out)).
		while (items) do {
			if (not ((old length) is equal to (length (out)))) 
				then (append string (sep) to (out))
				else (false).
			set (old length) to (length (out)).
			emit (first (items)) to (out) in (context) with scope (scope).
			set (items) to (second (items)).
		}.
		if ((context) is equal to (expression context))
			then (append string ")" to (out))
			else (false).
	} else (if ((ir) is an ir if) then {
		if ((context) is equal to (expression context)) then {
			append string "(value_boolean_is_true_remove_floating_reference(" to (out).
			emit (condition of ir if (ir)) to (out) in (expression context) with scope (scope).
			append string ") ? (" to (out).
			emit (then of ir if (ir)) to (out) in (context) with scope (scope).
			append string ") : (" to (out).
			emit (else of ir if (ir)) to (out) in (context) with scope (scope).
			append string "))" to (out).
		} else (if ((context) is equal to (statement context)) then {
			append string "if (value_boolean_is_true_remove_floating_reference(" to (out).
			emit (condition of ir if (ir)) to (out) in (expression context) with scope (scope).
			append string ")) {\n" to (out).
			emit (then of ir if (ir)) to (out) in (statement context) with scope (scope).
			append string "\n} else {\n" to (out).
			emit (else of ir if (ir)) to (out) in (statement context) with scope (scope).
			append string "}" to (out).
		} else {
			emit (condition of ir if (ir)) to (out) in (context) with scope (scope).
			emit (then of ir if (ir)) to (out) in (context) with scope (scope).
			emit (else of ir if (ir)) to (out) in (context) with scope (scope).
		}).
	} else (if ((ir) is an ir while) then {
		if ((context) is equal to (statement context)) then {
			append string "while (value_boolean_is_true_remove_floating_reference(" to (out).
			emit (condition of ir while (ir)) to (out) in (expression context) with scope (scope).
			append string ")) {\n" to (out).
			emit (body of ir while (ir)) to (out) in (statement context) with scope (scope).
			append string "\n}\n" to (out).
		} else (if ((context) is equal to (expression context)) then {
			append string "({ " to (out).
			emit (ir) to (out) in (statement context) with scope (scope).
			append string " 0; })" to (out).
		} else {
			emit (condition of ir while (ir)) to (out) in (context) with scope (scope).
			emit (body of ir while (ir)) to (out) in (context) with scope (scope).
		}).
	} else (if ((ir) is an ir variable) then {
		set (name) to
			(C ident for action (name of ir variable (ir))).
		register variable (name) in scope (scope).
		if (((context) is equal to (definition context)) or ((context) is equal to (nested definition context))) then {
			append string "struct value *" to (out).
			append string (name) to (out).
			append string ";\n" to (out).
		} else (if ((context) is equal to (statement context)) then {
			emit reference to variable (C ident for action (name of ir variable (ir)))
				from scope (scope) in scope (scope) to (out).
			append string " = value_add_reference(" to (out).
			emit (initial value of ir variable (ir)) to (out) in (expression context) with scope (scope).
			append string ");\n" to (out).
		} else (if ((context) is equal to (expression context)) then {
			append string "(" to (out).
			emit reference to variable (C ident for action (name of ir variable (ir)))
				from scope (scope) in scope (scope) to (out).
			append string " = value_add_reference(" to (out).
			emit (initial value of ir variable (ir)) to (out) in (expression context) with scope (scope).
			append string "))" to (out).
		} else (if ((context) is equal to (initializer context)) then {
			emit reference to variable (C ident for action (name of ir variable (ir)))
				from scope (scope) in scope (scope) to (out).
			append string " = 0;\n" to (out).
		} else (false)))).
	} else (if ((ir) is an ir assignment) then {
		set (name) to (C ident for action (name of ir assignment (ir))).
		set (var scope) to (lookup (name) in (variable list)).
		if (var scope) then {
			if ((context) is an evaluation) then {
				emit position (position of ir assignment (ir)) to (out).
				append string "(tmp_for_derefs = " to (out).
				emit reference to variable (name)
					from scope (var scope) in scope (scope) to (out).
				append string ", " to (out).
				emit reference to variable (name)
					from scope (var scope) in scope (scope) to (out).
				append string " = value_add_reference(" to (out).
				emit (value of ir assignment (ir)) to (out) in (expression context) with scope (scope).
				append string "), value_remove_reference(tmp_for_derefs)," to (out).
				emit reference to variable (name)
					from scope (var scope) in scope (scope) to (out).
				append string ")" to (out).
				if ((context) is equal to (statement context))
					then (append string ";\n" to (out))
					else (false).
			} else (false).
		} else {
			write "error: var ".
			write (name).
			write " not in scope in ".
			write (context).
			write " in ".
			write line (scope).
		}.
	} else (if ((ir) is an ir literal) then {
		if ((context) is an evaluation) then {
			emit position (position of ir literal (ir)) to (out).
			append string "value_make_string_from_c_string(" to (out).
			append string (value of ir literal (ir)) to (out).
			append string ")" to (out).
			if ((context) is equal to (statement context))
				then (append string ";\n" to (out))
				else (false).
		} else (false).
	} else (if ((ir) is an ir number) then {
		if ((context) is an evaluation) then {
			emit position (position of ir number (ir)) to (out).
			append string "value_make_number(" to (out).
			append string (string of number (value of ir number (ir))) to (out).
			append string ")" to (out).
			if ((context) is equal to (statement context))
				then (append string ";\n" to (out))
				else (false).
		} else (false).
	} else (if ((ir) is an ir import) then {
		if ((scope) is equal to (global scope)) then {
			define variable (import ir) with initial value (ir of ir import (ir)).
			define variable (module list)
				with initial value (lookup (context) in (module list by context)).
			if (module list) then {
				if ((module list) contains (name of ir import (ir))) then {
					set (import ir) to (false).
				} else {
					set (module list by context) to
						(update key (context) to ((name of ir import (ir)), (module list))
							in (module list by context)).
				}.
			} else {
				set (module list by context) to
					(update key (context) to ((name of ir import (ir)), (false))
						in (module list by context)).
			}.
			while (import ir) do {
				emit (first (import ir)) to (out) in (context) with scope (scope).
				set (import ir) to (second (import ir)).
			}.
		} else (compile error "Can only import at top level.").
	} else (compile error "unrecognized ir kind"))))))))))).
}.

define procedure (write derefs for globals) to do {
	define variable (vars) with initial value (variable list).
	define variable (var) with initial value (false).
	define variable (s) with initial value (false).
	while (vars) do {
		set (s) to "".
		set (var) to (first (vars)).
		if ((second (var)) is equal to (global scope)) then {
			write "value_remove_reference(".
			emit reference to variable (first (var))
				from scope (global scope) in scope (global scope) to (s).
			write (s).
			write line ");".
		} else (false).
		set (vars) to (second (vars)).
	}.
}.
